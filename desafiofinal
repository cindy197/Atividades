//Pessoa
package projeto;

//Classe Pessoa -> Classe principal
public class Pessoa {
    private String nome;
    private String matricula;
    private String cpf;
    private String rg;
    private String endereco;

    public Pessoa(String nome, String matricula, String cpf, String rg, String endereco){
        this.nome = nome;
        this.matricula = matricula;
        this.cpf = cpf;
        this.rg = rg;
        this.endereco = endereco;

    }
    public String getNome(){
        return nome;
    }
    public String getMatricula(){
        return matricula;
    }

    @Override
    public String toString(){
        return "Nome: " + nome + ", Matrícula: " + matricula + ", CPF: " + cpf + ", RG: " + rg + ", Endereço: " + endereco;
    }

}

// Professor
package projeto;

public class Professor extends Pessoa{
    public Professor (String nome, String matricula, String cpf, String rg, String endereco) {
        super(nome, matricula, cpf, rg, endereco);
    }
}

//Aluno
package projeto;

public class Aluno extends Pessoa{
    private int turmaID; // ID da turma que o aluno será alocado e guardado aqui

    public Aluno (String nome, String matricula, String cpf, String rg, String endereco, int turmaID) {
       // Construtor da classe Aluno, aqui será usado para criar um novo objeto aluno
        super(nome, matricula, cpf, rg, endereco); //Usa o construtor da classe Pessoa usando o "SUPER"
        this.turmaID = turmaID;
    }
    public int getTurmaID() {
        return turmaID; // Retorna o ID da turma pro aluno.
    }

    @Override
    public String toString() {
        return super.toString() + ", ID da Turma: " + turmaID;
    }
}

// TURMA
package projeto;

import java.util.ArrayList;
import java.util.List;

public class Turma {
    private int id;
    private List<Integer> alunosMatriculados; // Lista para armazenar os IDs dos alunos matriculados nessa turma
    // Só pode conter n inteiros.

    public Turma(int id) {
        this.id = id;
        this.alunosMatriculados = new ArrayList<>();
    }

    //Construtor
   public List<Integer>getAlunosMatriculados() {
        return alunosMatriculados;
   }

   public void adicionarAluno(int alunoId) {
        this.alunosMatriculados.add(alunoId);
   }
   public void removerAluno(int alunoId) {
        this.alunosMatriculados.remove(Integer.valueOf(alunoId)); // Remove o valor não pelo indice
   }

   @Override
    public String toString() {
        return "Turma ID: " + id + ", Alunos Matriculados: " + alunosMatriculados;
   }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }
}

// Aplicação Escola
package projeto;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Escola {
    private List<Professor> professores;
    private List<Aluno> alunos;
    private List<Turma> turmas;
    private int proximoTurmaId; //Gerar ID da turma automaticamente

    public Escola() {
        this.professores = new ArrayList<>();
        this.alunos = new ArrayList<>();
        this.turmas = new ArrayList<>();
        this.proximoTurmaId = 1;
    }

    // Metodos para criar professor, aluno e turma

    public void cadastrarProfessor(String nome, String matricula, String cpf, String rg, String endereco) {
        Professor professor = new Professor(nome, matricula, cpf, rg, endereco);
        professores.add(professor);
        System.out.println("Professor cadastrado com sucesso: " + professor + " !");

    }

    public void cadastrarAluno(String nome, String matricula, String cpf, String rg, String endereco, int turmaId) {
        if (turmaId <= 0) {
            System.out.println("Erro! O ID da turma deve ser maior que 0");
            return;
        }
        Turma turma = buscarTurma(turmaId);
        if (turma == null) {
            System.out.println("Erro: Turma não encontrada!");
            return;
        }

        Aluno aluno = new Aluno(nome, matricula, cpf, rg, endereco, turmaId);
        alunos.add(aluno);
        turma.adicionarAluno(alunos.indexOf(aluno)); //armazena o id do aluno na lista da turma.
        System.out.println("Alunos cadastrado com sucesso: " + aluno);
    }

    public Turma buscarTurma(int id) {
        for (Turma turma : turmas) {
            if (turma.getId() == id) {
                return turma;
            }
        }
        return null;
    }

    public void cadastrarTurma(){
        Turma turma = new Turma(proximoTurmaId++);
        turmas.add(turma);
        System.out.println("Turma cadastrada com sucesso!" + turma);
    }

    public void removerTurma(int turmaId) {
        Turma turmaRemover = null;
        for (Turma turma : turmas) {
            if (turma.getId() == turmaId) {
                turmaRemover = turma;
                break;
            }
        }
        if (turmaRemover != null) {
            turmas.remove(turmaRemover);
            System.out.println("Turma removida com sucesso! Turma ID: " + turmaId);
            reorganizarTurmas();
        } else {
            System.out.println("Erro! Turma não encontrada para remoção.");
        }
    }

    private void reorganizarTurmas () {
        proximoTurmaId = 1; // Reinicia o contador de ID's
        for (Turma turma : turmas) {
            turma.setId(proximoTurmaId++); //Atribui nova sequencia de ID
        }
    }

    // Metodos para criar a Lista de professores e alunos

    public void imprimirlistasProfessores() {
        System.out.println("\nLista de Professores: ");
        if (professores.isEmpty()) {
            System.out.println("Nenhum professor cadastrado! ");
        } else {
            for (Professor professor : professores) {
                System.out.println(professor);
            }
        }
    }

    public void imprimirlistaAlunos() {
        System.out.println("/nListas de alunos: ");
        if (alunos.isEmpty()) {
            System.out.println("Nenhum aluno cadastrado!");
        } else {
            for (Aluno aluno : alunos) {
                System.out.println(aluno);
            }
        }
    }

    public void imprimirlistaTurmas() {
        System.out.println("/nListas de turmas: ");
        if (turmas.isEmpty()) {
            System.out.println("Nenhumas turma cadastrada! ");
        } else {
            for (Turma turma : turmas) {
                System.out.println(turma);
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Escola escola = new Escola();

        int op;
        do {
            System.out.println("\n--- Sistema de Cadastro ---");
            System.out.println("1. Cadastrar Professora");
            System.out.println("2. Cadastrar Aluno");
            System.out.println("3. Cadastrar Turma");
            System.out.println("4. Remover Turma");
            System.out.println("5. Imprimir Lista de Professores");
            System.out.println("6. Imprimir Lista de Alunos");
            System.out.println("7. Imprimir Lista de Turmas");
            System.out.println("0. Sair");
            System.out.println("Digite a opção desejada: ");
            op = sc.nextInt();
            sc.nextLine(); // Consumir a linha após ler o inteiro

            switch (op) {
                case 1:
                    System.out.print("Nome do professor: ");
                    String nomeProfessor = sc.nextLine();
                    System.out.print("Matricula do professor: ");
                    String matriculaProfessor = sc.nextLine();
                    System.out.print("CPF do professor: ");
                    String cpfProfessor = sc.nextLine();
                    System.out.print("RG do professor: ");
                    String rgProfessor = sc.nextLine();
                    System.out.print("Endereço do professor: ");
                    String enderecoProfessor = sc.nextLine();
                    escola.cadastrarProfessor(nomeProfessor, matriculaProfessor, cpfProfessor, rgProfessor, enderecoProfessor);
                    break;
                case 2:
                    System.out.print("Nome do aluno: ");
                    String nomeAluno = sc.nextLine();
                    System.out.print("Matricula do aluno: ");
                    String matriculaAluno = sc.nextLine();
                    System.out.println("CPF do aluno: ");
                    String cpfAluno = sc.nextLine();
                    System.out.print("RG do aluno: ");
                    String rgAluno = sc.nextLine();
                    System.out.print("Endereço do aluno: ");
                    String enderecoAluno = sc.nextLine();
                    System.out.print("ID da turma do aluno: ");
                    int turmaidAluno = sc.nextInt();
                    sc.nextLine();
                    escola.cadastrarAluno(nomeAluno, matriculaAluno, cpfAluno, rgAluno, enderecoAluno, turmaidAluno);
                    break;
                case 3:
                    escola.cadastrarTurma();
                    break;
                case 4:
                    System.out.print("Digite a ID da turma a ser removida: ");
                    int turmaIdRemover = sc.nextInt();
                    sc.nextLine();
                    escola.removerTurma(turmaIdRemover);
                    break;
                case 5:
                    escola.imprimirlistasProfessores();
                    break;
                case 6:
                    escola.imprimirlistaAlunos();
                    break;
                case 7:
                    escola.imprimirlistaTurmas();
                    break;
                case 0:
                    System.out.println("Saindo do sistema...");
                    break;
                default:
                    System.out.println("Opção invalida! Tente novamente! ");
            }
        } while (op != 0);
    }

